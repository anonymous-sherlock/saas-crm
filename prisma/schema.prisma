generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model Notification {
  id        String   @id @default(uuid())
  message   String
  companyId String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  company   Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isRead    Boolean  @default(false)
  archived  Boolean  @default(false)
  icon      Icon?
  action    String?

  @@index([companyId])
  @@index([userId])
}

enum Icon {
  warning
  success
  info
}

model Company {
  id                        String         @id @default(cuid())
  name                      String
  phone                     String
  gstNumber                 String?
  contactPersonName         String
  contactPersonEmail        String
  billingContactPersonName  String
  billingContactPersonEmail String
  billingContactPersonPhone String?
  country                   String
  state                     String
  city                      String
  zipcode                   String
  landmark                  String?
  address                   String
  user                      User?
  notification              Notification[]
  media                     Media[]

  @@map("company_details")
}

model User {
  id                  String               @id @default(cuid())
  name                String
  email               String               @unique
  emailVerified       DateTime?
  image               String?
  role                Role                 @default(CUSTOMER)
  password            String?
  active              Boolean              @default(false)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  company             Company?             @relation(fields: [companyId], references: [id])
  companyId           String?              @unique
  accounts            Account[]
  passwordResetTokens PasswordResetToken[]
  activateTokens      ActivateToken[]
  apiKeys             ApiKey[]
  BearerToken         BearerToken[]
  campaigns           Campaign[]
  leads               Lead[]
  products            Product[]
  notification        Notification[]
  media               Media[]

  @@fulltext([name, email])
}

model Media {
  id               String   @id @default(uuid())
  name             String
  size             Int?
  type             String?
  url              String
  originalFileName String?
  user             User?    @relation(fields: [userId], references: [id])
  userId           String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  company          Company? @relation(fields: [companyId], references: [id])
  companyId        String?

  @@map("media")
}

model PasswordResetToken {
  id        Int       @id @default(autoincrement())
  token     String    @unique
  createdAt DateTime  @default(now())
  resetAt   DateTime?

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([userId, token, resetAt])
  @@map("password_reset_token")
}

model ActivateToken {
  id          Int       @id @default(autoincrement())
  token       String    @unique
  createdAt   DateTime  @default(now())
  activatedAt DateTime?
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "ActivateToken_userId_fkey")
  @@map("activate_token")
}

model ApiKey {
  id        String   @id @default(cuid())
  key       String   @unique
  enabled   Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, key, enabled])
  @@index([userId], map: "ApiKey_userId_fkey")
  @@map("api_key")
}

model BearerToken {
  id        String    @id @default(cuid())
  key       String    @unique
  userId    String
  active    Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  expiresAt DateTime?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "BearerToken_userId_fkey")
  @@map("bearer_token")
}

model Product {
  productId   String         @id @default(cuid())
  name        String
  description String?
  price       Float
  quantity    Int
  ownerId     String
  category    String?
  campaign    Campaign[]
  owner       User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  images      ProductImage[]
  media       ProductMedia[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ownerId], map: "Product_ownerId_fkey")
  @@map("products")
}

model ProductMedia {
  id             String  @id @default(cuid())
  url            String
  productMediaId String
  product        Product @relation(fields: [productMediaId], references: [productId], onDelete: Cascade)

  @@index([productMediaId], map: "ProductMedia_productMediaId_fkey")
  @@map("product_media")
}

model ProductImage {
  id               String  @id @default(cuid())
  name             String
  size             Int
  type             String
  url              String
  originalFileName String
  uploadPath       String?

  productId String
  product   Product  @relation(fields: [productId], references: [productId], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@index([productId], map: "ProductImage_productId_fkey")
  @@map("product_images")
}

model Campaign {
  id                 String         @id @default(cuid())
  code               String         @unique
  name               String
  description        String?
  callCenterTeamSize String
  leadsRequirements  String
  targetCountry      String
  targetGender       Gender
  trafficSource      TrafficSource
  targetAge          Json
  workingDays        Json
  workingHours       Json
  status             CampaignStatus @default(OnHold)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  productId          String?
  userId             String
  product            Product?       @relation(fields: [productId], references: [productId], onDelete: Cascade)
  user               User           @relation(fields: [userId], references: [id])
  leads              Lead[]
  targetRegion       TargetRegion[]

  @@index([productId], map: "Campaign_productProductId_fkey")
  @@index([userId], map: "Campaign_userId_fkey")
  @@fulltext([name, code])
  @@fulltext([description])
  @@map("campaigns")
}

model TargetRegion {
  id         String   @id @default(cuid())
  regionName String
  campaignId String
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@index([campaignId], map: "TargetRegion_campaignId_fkey")
  @@map("target_region")
}

model Lead {
  id         String     @id @default(cuid())
  ip         String
  name       String
  phone      String
  address    String
  state      String
  region     String
  country    String
  status     LeadStatus @default(OnHold)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  campaignId String
  userId     String?
  campaign   Campaign   @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  user       User?      @relation(fields: [userId], references: [id])

  @@index([campaignId], map: "Lead_leadCampaingId_fkey")
  @@index([userId], map: "Lead_userId_fkey")
  @@map("leads")
}

enum fileStatus {
  failed
  null
  error
  processing
  done
}

enum TrafficSource {
  Social
  Adult
  Native
  Google
  Facebook
}

enum CampaignStatus {
  OnHold
  InProgress
  Canceled
  Done
}

enum LeadStatus {
  OnHold
  Trashed
  Paid
  Approved
}

enum Role {
  SUPER_Admin
  ADMIN
  CLIENT
  CUSTOMER
}

enum Gender {
  Male
  Female
  Both
}
