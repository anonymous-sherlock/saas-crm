generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model Notification {
  id        String   @id @default(uuid())
  message   String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  company   Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isRead    Boolean  @default(false)
  archived  Boolean  @default(false)
  icon      Icon?
  action    String?

  @@index([companyId])
  @@index([userId])
}

enum Icon {
  warning
  success
  info
}

model Company {
  id                        String         @id @default(cuid())
  name                      String
  phone                     String
  gstNumber                 String?
  contactPersonName         String
  contactPersonEmail        String
  billingContactPersonName  String
  billingContactPersonEmail String
  billingContactPersonPhone String?
  country                   String
  state                     String
  city                      String
  zipcode                   String
  landmark                  String?
  address                   String
  user                      User?
  notification              Notification[]
  media                     Media[]

  @@map("company_details")
}

model User {
  id                  String               @id @default(cuid())
  name                String
  email               String               @unique
  emailVerified       DateTime?
  image               String?
  role                Role                 @default(CUSTOMER)
  password            String?
  active              Boolean              @default(false)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  company             Company?             @relation(fields: [companyId], references: [id])
  companyId           String?              @unique
  accounts            Account[]
  passwordResetTokens PasswordResetToken[]
  activateTokens      ActivateToken[]
  apiKeys             ApiKey[]
  bearerTokens        BearerToken[]
  campaigns           Campaign[]
  leads               Lead[]
  products            Product[]
  notification        Notification[]
  media               Media[]

  @@fulltext([name, email])
}

model Media {
  id               String         @id @default(uuid())
  key              String
  name             String
  url              String
  size             Int?
  type             String?
  originalFileName String?
  user             User?          @relation(fields: [userId], references: [id])
  userId           String?
  company          Company?       @relation(fields: [companyId], references: [id])
  companyId        String?
  productImages    ProductImage[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@map("media")
}

model PasswordResetToken {
  id        Int       @id @default(autoincrement())
  token     String    @unique
  createdAt DateTime  @default(now())
  resetAt   DateTime?

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([userId, token, resetAt])
  @@map("password_reset_token")
}

model ActivateToken {
  id          Int       @id @default(autoincrement())
  token       String    @unique
  createdAt   DateTime  @default(now())
  activatedAt DateTime?
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "ActivateToken_userId_fkey")
  @@map("activate_token")
}

model ApiKey {
  id        String   @id @default(cuid())
  key       String   @unique
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, key, active])
  @@index([userId], map: "ApiKey_userId_fkey")
  @@map("api_key")
}

model BearerToken {
  id        String    @id @default(cuid())
  key       String    @unique
  userId    String
  active    Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  expiresAt DateTime?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "BearerToken_userId_fkey")
  @@map("bearer_token")
}

model Product {
  id          String         @id @default(cuid())
  name        String
  description String?
  price       Float
  quantity    Int
  ownerId     String
  category    String?
  campaign    Campaign[]
  owner       User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  images      ProductImage?
  media       ProductMedia[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@index([ownerId], map: "Product_ownerId_fkey")
  @@fulltext([id])
  @@fulltext([name])
  @@fulltext([description])
  @@map("products")
}

model ProductImage {
  id        String   @id @default(cuid())
  media     Media[]
  product   Product? @relation(fields: [productId], references: [id])
  productId String?  @unique
  createdAt DateTime @default(now())

  @@index([productId], map: "ProductImage_productId_fkey")
  @@map("product_images")
}

model ProductMedia {
  id             String  @id @default(cuid())
  url            String
  productMediaId String
  product        Product @relation(fields: [productMediaId], references: [id], onDelete: Cascade)

  @@index([productMediaId], map: "ProductMedia_productMediaId_fkey")
  @@map("product_media")
}

model Campaign {
  id                 String         @id @default(cuid())
  code               String         @unique
  name               String
  description        String?
  callCenterTeamSize String
  leadsRequirements  String
  targetCountry      String
  targetRegion       TargetRegion[]
  targetGender       Gender
  trafficSource      TrafficSource
  targetAge          Json
  workingDays        Json
  workingHours       Json
  status             CampaignStatus @default(OnHold)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  productId          String?
  userId             String
  product            Product?       @relation(fields: [productId], references: [id], onDelete: Cascade)
  user               User           @relation(fields: [userId], references: [id])
  leads              Lead[]

  @@index([name], name: "unique_campaign_name_idx")
  @@index([description], name: "campaign_description_idx")
  @@fulltext([name, code, description])
  @@fulltext([name])
  @@fulltext([code])
  @@fulltext([description])
  @@map("campaigns")
}

model TargetRegion {
  id         String   @id @default(cuid())
  regionName String
  campaignId String
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@index([campaignId], map: "TargetRegion_campaignId_fkey")
  @@map("target_region")
}

model Lead {
  id           String     @id @default(cuid())
  name         String
  phone        String
  country      String?
  region       String?
  country_code String?    @db.VarChar(5)
  region_code  String?    @db.VarChar(5)
  city         String?
  zipcode      String?
  street       String?
  address      String?
  email        String?
  website      String?
  description  String?
  ip           String?
  status       LeadStatus @default(OnHold)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  campaign     Campaign   @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId   String
  user         User?      @relation(fields: [userId], references: [id])
  userId       String?

  @@index([campaignId], map: "Lead_leadCampaingId_fkey")
  @@index([userId], map: "Lead_userId_fkey")
  @@map("leads")
}

enum fileStatus {
  failed
  null
  error
  processing
  done
}

enum TrafficSource {
  Social
  Adult
  Native
  Google
  Facebook
}

enum CampaignStatus {
  OnHold
  InProgress
  Canceled
  Done
}

enum LeadStatus {
  OnHold
  Trashed
  Paid
  Approved
}

enum Role {
  SUPER_ADMIN
  ADMIN
  CLIENT
  CUSTOMER
}

enum Gender {
  Male
  Female
  Both
}
